#Stepper Robot lib reference

== Overview ==
This library implements a class that takes care to synchronize the two motors to produce programmed motions. All methods are non-blocking and library works with unipolar or bipolar stepper motors. Advanced features were implemented for vibration reduction, energy saving and protection of control circuits.

The class intents to generate signals to ULN2003/2803 based boards or equivalent circuits to drive unipolar motors and also boards with double h-bridge to drive bipolar motors. These boards do not have the advanced features that are typically found in boards like Easy Driver or Pololu boards based on A4988. So, library try to provide a better and safe control with no hardware resources. 

=== Features ===
 * Extremely precise movements.
 * Non-blocking methods.
 * Works with bipolar or unipolar motors.
 * Automatic acceleration and deceleration.
 * Allows storing movement commands in a buffer so they run in sequence.
 * Advanced capabilities for vibration control at low speeds.
 * Supports half-step and full-step mode with one or two coils.
 * Uses Timer 1 to control the pulse's timing.

*Note:* This version uses TimerOne library to control the timer. This library is not included on package but you can download from [http://playground.arduino.cc/Code/Timer1 Timer1 page]. 


== Introduction ==
It is assumed that there are two 4-phase stepping motors installed on differential configuration. It is also assumed that both motors have the same number of steps per revolution. Motors can be unipolar or bipolar. Main class controls both motors maintaining synchrony between them to produce different movements quantified by pulses. Each pulse when sent to coils, make motors spin one step.

All methods are non-blocking. All return immediately and when appropriate, perform the movement in background. The methods never wait the end of the movement to return. The movements are controlled using the arduino's timer 1. This gives more accurately for timing pulses and also eliminates the need for a service function that is often called by the main loop.

This version implements the following movement types:
{{{
#define mvAhead    0
#define mvBack     1
#define mvSpinL    2
#define mvSpinR    3
#define mvTurnL    4
#define mvTurnR    5
#define mvBkTurnL  6
#define mvBkTurnR  7
#define mvBrake    8
}}}


== Automatic acceleration ==
A pair of stepper motors can move a relatively heavy robot at a relatively high speed, but that speed can only be achieved gradually. Motors can not initiate the movement at full speed and even if it were possible, would not be desirable because the fixed structures on the robot as sensors, arms, antennas, cameras and other could suffer intense inertial impacts.

The main class implements an automatic control of acceleration and deceleration in all movements performed to enable higher end speed. The parameters for this feature are defined at instance initialization by:
{{{
# define startSpeed      ​​72 // start speed (pulses per second)
# define cruiseSpeed ​​   182 // cruise speed (pulses per second)
# define pulsesToCruise 100 // how many pulses to get cruising
}}}

The motors start movement at the speed indicated by *startSpeed* ​​and gradually accelerates until it reaches cruising speed set by *cruiseSpeed*. The number of pulses that will be used for the acceleration (or deceleration) is informed by *pulsesToCruise*. To stop or change the type of movement the robot is decelerated until it reaches the starting speed. This control is automatic.

== Initialization ==
The library already creates an instance of the main class (*rob*) but it needs to be initialized in setup() function. Is also required inform which pins will be used for each engine. If necessary you can use the analog pins.
{{{
 rob.init(startSpeed, cruiseSpeed, pulsesToCruise);
 rob.initRightMotor(4,5,6,7);
 rob.initLeftMotor(9,10,11,12);
}}}

== Bufferized commands ==
The library includes a circular buffer capable of storing a large amount of movement commands. Once stored, these commands can be executed in sequence automatically.

== Operating Modes ==
All stepper motor can be operated at least 3 modes : full step with one coil, full step with two coils and half step. The library supports the three modes. There are two attributes in the class that controls the mode of operation: halfStep and turbo. 
halfStep have highest priority and selects between half-step and full-step mode. If the full-step mode is selected, then the turbo attribute selects between full-step with one coil or two. When half-step mode is selected turbo attribute has no effect. The four methods listed below control these two attributes. It is recommended to select the operating mode in setup() function and does not change during operation. Frequent mode changes may impact on the accuracy of navigation. It is important to note that the operation mode of motors have impact in vibration. In half-step mode vibration levels are much lower.
{{{
void halfStepOn();
void halfStepOff();
void turboOn();
void turboOff();
}}}

== Vibration Control ==
Stepper motors have operating characteristics that need to be taken into account during its operation. At low revs, some vibration can occur before it reaches cruising speed. Eventually, depending on the motor used, battery voltage, the weight of the robot and other factors, at certain values ​​of RPM, vibration can be severe enough to disrupt navigation causing deviations in the robot trajectory. To reduce vibration, the library uses two techniques. The first is to make the acceleration and deceleration pass more quickly through the low rpm. So the acceleration is not linear, the robot accelerates (or decelerates) more strongly at low revs and more smoothly at higher speeds.

Second technique uses the cutting of supply coils before the end of pulse during the acceleration/deceleration. Normally, the motor's coils are fed throughout the duration of the pulse. But in order to reduce the vibration, the power coils can be cut before the end of the pulse and kept turned off the remaining time. This technique in addition to greatly decrease the vibration at low revs, also happens to save energy and increase robot autonomy. The tests gave very positive results, so this feature is already enabled by default.

The *setCutPercent()* method informs the initial cut percentage. This percentage is a value between 0 and 1 that indicates the percentage of the pulse before cutting. For example, if the pulse has a duration of 10 milliseconds and percentage reported is 0.75, then the coils will be powered by 75% of the time (7.5 ms) and kept turned off the remaining time (2.5 ms).
{{{
void setCutPercent(float initialCutPercent);
}}}

Cutting coils is only done during the acceleration/deceleration. At cruising speed there is no cut. The value entered by *setCutPercent()* method refers to the initial cutoff value, which is applied when the motors rotate at the start speed. As speed increases, percentage increases until reaching 1.0 (100%) at cruising speed.

The best value for this parameter depends on so many factors that must be calibrated especially for the robot in question and the operation mode of motors (half or full step) experimentally. Very high values ​​(close to 1) are less effective, but very low values ​​can cause the loss of steps. Default value is 0.9.

== Movements ==
Movements can be requested in two ways: using the *move()* method or by using *addMove()* method in conjunction with *goNow()* method.

The *move()* method does not use the circular buffer, the movement is not stored, it is executed immediately. The method starts motion and returns. If the robot is already moving, calls to this method are ignored and have no effect. To see if the robot is in motion, use the *isMoving()* method.

The *stopNow()* method aborts the ongoing movement immediately. This is accomplished by simply interrupting the pulse's flow, thus cutting the power coils. Depending on conditions, it can not immediately stop the robot, since there is the inertia of the ongoing movement that can push the robot for a few more centimeters.
{{{
boolean move(char movType, int pulses);
boolean isMoving();
void stopNow();
void decelStop();
}}}

The *decelStop()* method also aborts the ongoing movement, but does so by forcing the robot to go into deceleration. The robot will stop when it reaches the starting speed. The number of pulses that the robot will walk until stop depends on the speed at which it is moving. In cruising speed (maximum) the amount of pulses specified by *pulsesToCruise* is required. If the speed is lower then fewer pulses are needed.


== Bufferized movements ==
The other way uses *addMove()* method. This method only stores movement in the buffer and returns, movement is not started immediately. To start the execution of the stored movements you need to call the *goNow()* method. *goNow()* begins execution of the moves list and returns. The movements stored in the buffer will be executed in sequence until the buffer is empty or until the method *stopAndClear()* it is called. This method calls the *decelStop()* method to stop the current move and delete all pending movements in the buffer.

You can add more movements at any time, even while they run. The new movements become part of the list of running movements.
{{{
boolean addMove(int movType, int pulses);
void goNow();
void stopAndClear();
}}}

== Chopper to lock wheels ==
The four _turn_ type movements demand that one wheel comes to rest in the same position while the other moves in a circle. In the case of mvBrake movement, both wheels are locked in the same position. To ensure that the stop wheel is actually stopped, the coils are activated locking the wheel in its position. When the wheels are locked, the library uses the chopper technique to energize the coils. This prevents a coil to be powered continuously for a long time, which could burn the motor or the controller board. Besides protecting the motor and circuitry that also saves energy, since the coil is not powered all the time.

Below the class declaration as perceived by the main file.

{{{
class StepperRobot{
public:
   // setup
   void init(int startSpeed, int cruiseSpeed, int pulsesToCruise);
   void initLeftMotor(int mPin_1, int mPin_2, int mPin_3, int mPin_4);
   void initRightMotor(int mPin_1, int mPin_2, int mPin_3, int mPin_4);
 
   // movements
   boolean move(char movType, int pulses);
   boolean isMoving();
   void decelStop();
   void stopNow();
 
   // bufferized movements
   boolean addMove(int movType, int pulses);
   void goNow();
   void stopAndClear();
 
   // Config
   void turboOn();
   void turboOff();
   void halfStepOn();
   void halfStepOff();
   void setCutPercent(float initialCutPercent)
};
 
StepperRobot rob;
}}}

== Example program ==
{{{
#include <TimerOne.h>       // <<<<<< you need include TimerOne lib
#include <StepperRobot.h>
 
#define stepsPerRevolution  48  
#define startSpeed          72  
#define cruiseSpeed        182  
#define pulsesToCruise     110  
 
#define statusLed           13  
 
void setup() {
  // Status led
  pinMode(statusLed, OUTPUT);
 
  rob.init(startSpeed, cruiseSpeed, pulsesToCruise);
  rob.initRightMotor(2,3,4,5);
  rob.initLeftMotor(A3,A2,A1,A0);  // works with analog pins
 
  rob.halfStepOff();
  rob.turboOn();
 
  digitalWrite(statusLed, true);
  delay(1500);              // Very usefull delay
  digitalWrite(statusLed, false);
}
 
// pulses to full turn/spin
#define turnPulses 320
#define spinPulses (turnPulses/2)
 
void loop() {
  // status led with heart beat 
  // do not work with many delays on code
  unsigned long ms= millis();
  digitalWrite(statusLed, (ms >> 8)&(ms >> 6)&1);
 
  if(!rob.isMoving())
  {
    delay(100);  // get some rest
 
    // Store movements list
    rob.addMove(mvAhead, stepsPerRevolution*5);
    rob.addMove(mvSpinL, spinPulses*2);
    rob.addMove(mvSpinR, spinPulses*2);
    rob.addMove(mvBack, stepsPerRevolution*5);
    rob.addMove(mvSpinR, spinPulses/4);
    rob.addMove(mvTurnL, turnPulses /2);
    rob.addMove(mvTurnR, turnPulses/2);
    rob.addMove(mvTurnL, turnPulses);
    rob.addMove(mvBkTurnR, turnPulses/2);
    rob.addMove(mvBkTurnL, turnPulses/2);
    rob.addMove(mvSpinR, 3 * spinPulses / 4);
    rob.addMove(mvBrake, startSpeed*5);
 
    // Start execution
    rob.goNow();
  }
}
}}}